Problem :: 127. Word Ladder
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Time Complexity :: O(n*word.length()*26*1) // length of word vector * word.length * 26(char a to z ) * 1(for checking in word in set which O(1) operation because of unordered set )
Space Complexity :: O(n)

Code::
#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& word) {
        unordered_set<string>st(word.begin() , word.end());
        queue<pair<string,int>>q;
        q.push({beginWord , 1});
        st.erase(beginWord);
        while(!q.empty()){
            string word = q.front().first;
            int steps = q.front().second;
            q.pop();
            if(word == endWord)return steps;
            for(int i =0 ; i<word.length() ; i++){
                char ch = word[i];
                for(char c='a' ; c<='z' ; c++){
                    word[i] = c;
                    if(st.find(word)!=st.end()){
                        st.erase(word);
                        q.push({word , steps+1});
                    }
                }
                word[i] = ch;
            }
        }
        return 0;
    }
};
