Problem :: 1219. Path with Maximum Gold
In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

Every time you are located in a cell you will collect all the gold in that cell.
From your position, you can walk one step to the left, right, up, or down.
You can't visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.


Intuition ::
    Simply traverse for all point in matrix as constraints are
    very low so you can traverse without using storing the ans 
    for each interation in dp.

Complexity::
Time complexity:
    O(m.n.4^g)
Space complexity:
    O(m.n);

Code::
#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class Solution {
    int solve(vector<vector<int>>&grid , vector<vector<bool>>&vis , int i , int j){
        int sum =0;
        if(grid[i][j]==0)return 0; // According to condition
        vis[i][j] = 1; // mark grid position as visited to avoid visiting again
        int down =0 ;
        if(i+1<grid.size()  && !vis[i+1][j]){
            vis[i+1][j] = 1;
            down += solve(grid , vis , i+1 , j); // call for next row
            vis[i+1][j]= 0;
        }
        int up =0;
        if(i-1>=0 && !vis[i-1][j]){
            vis[i-1][j] = 1;
            up += solve(grid , vis , i-1 , j);// call for upper row
             vis[i-1][j] = 0;
        }
        int right =0;
        if(j+1<grid[0].size()  && !vis[i][j+1]){
            vis[i][j+1] = 1;
            right += solve(grid , vis , i, j+1); // call for next column
            vis[i][j+1] = 0;
        }
        int left =0;
        if(j-1>=0 && !vis[i][j-1] ){
            vis[i][j-1] = 1;
            left += solve(grid , vis , i , j-1); // call for previous column
            vis[i][j-1] = 0;
        }

        sum = grid[i][j] + max(down , max(up , max(left , right))); // add the current value + max of all part that is up , down , left , right 
        return sum; 
    } 
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        int sum =0;
        for(int i=0 ; i<grid.size() ;i++){
            for(int j=0 ; j<grid[0].size(); j++){
                vector<vector<bool>>vis(grid.size() , vector<bool>(grid[0].size(),0));
                sum = max(sum , solve(grid , vis , i , j));
            }
        }
        return sum;
    }
};
