Problem :: 15. 3Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Time Complexity ::  O(N * log N)
Space Complexity :: O(1)

Code ::
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {        
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;
        for(int i=0;i<n-2;i++){
            if(i==0||(i>0&&nums[i]!=nums[i-1])){
                int low=i+1;
                int high=n-1;
                int target=0-nums[i];
                while(low<high){
                    if(nums[low]+nums[high]==target){
                        ans.push_back({nums[i],nums[low],nums[high]});
                        while(lown< high && nums[low] == nums[low+1]) low++;
                        while(low < high && nums[high] == nums[high-1]) high--;
                        low++;high--;
                    }
                    else if(nums[low]+nums[high]>target) high--;
                    else low++;
                }
            }
        }
        return ans;
    }
};t
