Problem :: 552. Student Attendance Record II

An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:

'A': Absent.
'L': Late.
'P': Present.
Any student is eligible for an attendance award if they meet both of the following criteria:

The student was absent ('A') for strictly fewer than 2 days total.
The student was never late ('L') for 3 or more consecutive days.
Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.

Time Compelxity ::O( N * 2 * 3 ) => O(N)
Space Complexity :: O(N *2 *3 ) => O(N)

Code :: 
class Solution {
    const int mod = 1e9+7;
    int solve(int n , int i  ,int absent , int late , vector<vector<vector<int>>>&dp){
        if(i==n)return 1;
        int ans =0;
        if(dp[i][absent][late]!=-1)return dp[i][absent][late];
        ans += solve(n , i+1 , absent , 0 , dp);
        if(absent<1) ans = (ans + solve(n , i+1 , absent+1 , 0,dp))%mod;
        if(late<2)ans = (ans + solve(n , i+1 , absent , late+1,dp))%mod;
        return dp[i][absent][late] = ans;
    }
    int solvetab(int n){
        vector<vector<vector<int>>>dp(n+1, vector<vector<int>>(2 , vector<int>(3,0)));
        for(int i = 0 ; i<2 ; i++){
            for(int j=0 ; j<3 ; j++){
                dp[n][i][j] = 1;
            }
        }
        
        for(int i = n-1 ; i>=0 ; i--){
            for(int absent = 1 ; absent>=0 ; absent--){
                for(int late = 2 ; late>=0 ; late--){
                    int ans =0;
                    ans =  (ans + dp [i+1] [absent][0 ])%mod;
                    if(absent<1) ans = (ans + dp[ i+1 ][ absent+1] [0])%mod;
                    if(late<2)ans = (ans + dp[i+1][ absent][late+1])%mod;
                    dp[i][absent][late] = ans;
        }
        }
        }
        return dp[0][0][0];
    }
public:
    int checkRecord(int n) {
        vector<vector<vector<int>>>dp(n+1, vector<vector<int>>(2 , vector<int>(3,-1)));
        // return solve(n , 0  , 0 , 0  , dp);
        return solvetab(n);
    }
};



